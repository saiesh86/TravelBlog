<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppendIPToMessageSetting" xml:space="preserve">
    <value>Dołącz IP odwiedzającego do wiadomości?:</value>
    <comment>Append Visitor IP to Message?:</comment>
  </data>
  <data name="ButtonDisabledPleaseWait" xml:space="preserve">
    <value>Proszę czekać…</value>
    <comment>Please Wait...</comment>
  </data>
  <data name="ContactFormConfirmDeleteMessage" xml:space="preserve">
    <value>Czy na pewno chcesz skasować tę wiadomość?</value>
    <comment>Are you sure you want to delete this message?</comment>
  </data>
  <data name="ContactFormDeleteButton" xml:space="preserve">
    <value>Usuń</value>
    <comment>Delete</comment>
  </data>
  <data name="ContactFormEditorHeightSetting" xml:space="preserve">
    <value>Wysokość edytora</value>
    <comment>Editor Height</comment>
  </data>
  <data name="ContactFormEmailSetting" xml:space="preserve">
    <value>Adres email</value>
    <comment>Email address</comment>
  </data>
  <data name="ContactFormEmailSettingRegexWarning" xml:space="preserve">
    <value>Musisz wprowadzić poprawny adres email</value>
    <comment>You must enter a valid e-mail address</comment>
  </data>
  <data name="ContactFormEmptyMessageWarning" xml:space="preserve">
    <value>Musisz wprowadzić wiadomość</value>
    <comment>You must enter a message.</comment>
  </data>
  <data name="ContactFormFeatureName" xml:space="preserve">
    <value>Formularz kontaktowy</value>
    <comment>Contact Form</comment>
  </data>
  <data name="ContactFormMessageDetailLabel" xml:space="preserve">
    <value>Szczegóły wiadomości</value>
    <comment>Message Detail</comment>
  </data>
  <data name="ContactFormMessageLabel" xml:space="preserve">
    <value>Wiadomość:</value>
    <comment>message:</comment>
  </data>
  <data name="ContactFormMessageListFromHeader" xml:space="preserve">
    <value>Od</value>
    <comment>From</comment>
  </data>
  <data name="ContactFormMessageListHeader" xml:space="preserve">
    <value>Wiadomości od</value>
    <comment>Contact Form Messages</comment>
  </data>
  <data name="ContactFormMessageListPageSizeSetting" xml:space="preserve">
    <value>Rozmiar listy wiadomości</value>
    <comment>Message List Page Size:</comment>
  </data>
  <data name="ContactFormMessageListReceivedHeader" xml:space="preserve">
    <value>Odebrane</value>
    <comment>Received</comment>
  </data>
  <data name="ContactFormMessageListRefreshLink" xml:space="preserve">
    <value>Odśwież</value>
    <comment>Refresh</comment>
  </data>
  <data name="ContactFormMessageListSubjectHeader" xml:space="preserve">
    <value>Temat</value>
    <comment>Subject</comment>
  </data>
  <data name="ContactFormMessagesLabel" xml:space="preserve">
    <value>Lista wiadomości</value>
    <comment>Message List</comment>
  </data>
  <data name="ContactFormSendButtonAccessKey" xml:space="preserve">
    <value>1</value>
    <comment>1</comment>
  </data>
  <data name="ContactFormSendButtonLabel" xml:space="preserve">
    <value>Wyślij</value>
    <comment>Send</comment>
  </data>
  <data name="ContactFormSolveQuestionMessage" xml:space="preserve">
    <value>Rozwiąż to aby udowodnić że jesteś żywym człowiekiem, a nie szkodliwymi skryptem.</value>
    <comment>Solve This To Prove You are a Real Person, not a SPAM script.</comment>
  </data>
  <data name="ContactFormSubjectLabel" xml:space="preserve">
    <value>Temat:</value>
    <comment>subject:</comment>
  </data>
  <data name="ContactFormSubjectPrefixSetting" xml:space="preserve">
    <value>Prefix tematy:</value>
    <comment>Subject Prefix:</comment>
  </data>
  <data name="ContactFormThankYouLabel" xml:space="preserve">
    <value>Dziękujemy! Twoja wiadomość została wysłana.</value>
    <comment>Thank You! Your message has been sent.</comment>
  </data>
  <data name="ContactFormUseCommentSpamBlocker" xml:space="preserve">
    <value>Włącz blokowanie SPAM'u</value>
    <comment>Enable SPAM Blocking</comment>
  </data>
  <data name="ContactFormValidAddressLabel" xml:space="preserve">
    <value>Należy wprowadzić poprawny adres e-mail.</value>
    <comment>You must enter a valid e-mail address.</comment>
  </data>
  <data name="ContactFormViewButton" xml:space="preserve">
    <value>Widok</value>
    <comment>View</comment>
  </data>
  <data name="ContactFormViewMessagesLink" xml:space="preserve">
    <value>Pokaż wiadomości</value>
    <comment>View Messages</comment>
  </data>
  <data name="ContactFormWrongAnswerMessage" xml:space="preserve">
    <value>Przepraszamy, odpowiedź nie jest poprawna. Twoja wiadomość nie została wysłana.</value>
    <comment>Sorry, you did not solve the problem so your message was not sent.</comment>
  </data>
  <data name="ContactFormYourEmailLabel" xml:space="preserve">
    <value>Twój adres e-mail:</value>
    <comment>your e-mail address:</comment>
  </data>
  <data name="ContactFormYourNameLabel" xml:space="preserve">
    <value>Twoje imię i/lub nazwisko:</value>
    <comment>your name:</comment>
  </data>
  <data name="ContactFormEmailAliasSetting" xml:space="preserve">
    <value>Display Alias(es) for Receiving Email Address(es)</value>
  </data>
  <data name="ContactFormEmailBccSetting" xml:space="preserve">
    <value>BCC Email Address(es)</value>
  </data>
  <data name="CustomCssClassSetting" xml:space="preserve">
    <value>Custom CSS Class</value>
  </data>
  <data name="CustomCssClassSettingRegexWarning" xml:space="preserve">
    <value>Invalid Custom CSS Class</value>
  </data>
  <data name="KeepMessagesInDatabase" xml:space="preserve">
    <value>Keep Messages</value>
  </data>
  <data name="ToLabel" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="UseHeading" xml:space="preserve">
    <value>Use Heading for Title?</value>
  </data>
  <data name="UseInputAddressAsFromAddress" xml:space="preserve">
    <value>Use entered email as from address?</value>
  </data>
</root>